name: Frontend CI/CD - Build, Versionamento e Imagem Docker

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build_version_docker:
    runs-on: ubuntu-latest
    permissions:
      contents: write 

    steps:
      - name: Checkout do Código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Instalar Dependências do Frontend
        run: npm install

      - name: Rodar Lint
        run: npm run lint -- --max-warnings 100 

      - name: Buildar Frontend
        run: npm run build 

      - name: Exibir Conteúdo da Pasta Dist (para depuração)
        run: |
          echo "Conteúdo da pasta dist (após o build):"
          ls -l dist
          echo "Listando todos os arquivos dentro de dist (recursivamente):"
          find dist -type f

      - name: Configurar Credenciais do Git (para push de tag)
        run: |
          git config user.name "ADACompany01"
          git config user.email "ada2024fatec.mrs@outlook.com"

      - name: Executar Lógica de Versionamento e Criar Tag/Commit
        id: versioning 
        run: |
          git fetch origin --tags # Buscar todas as tags existentes do repositório

          # Tentar pegar a última versão existente, se não houver, começa de v0.0.0
          LATEST_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Última versão encontrada para o Frontend: $LATEST_VERSION"

          # Extrair major, minor, patch da versão atual
          # Remover 'v' do prefixo para manipulação de versão
          VERSION_WITHOUT_V=${LATEST_VERSION#v}
          
          # Verificar se a string não está vazia antes de cortar
          if [ -z "$VERSION_WITHOUT_V" ]; then
              CURRENT_MAJOR=0
              CURRENT_MINOR=0
              CURRENT_PATCH=0
          else
              CURRENT_MAJOR=$(echo $VERSION_WITHOUT_V | cut -d. -f1)
              CURRENT_MINOR=$(echo $VERSION_WITHOUT_V | cut -d. -f2)
              CURRENT_PATCH=$(echo $VERSION_WITHOUT_V | cut -d. -f3)
          fi

          # Incrementar a versão PATCH
          NEW_PATCH=$((CURRENT_PATCH + 1))
          NEW_VERSION="v${CURRENT_MAJOR}.${CURRENT_MINOR}.${NEW_PATCH}"

          echo "Nova versão proposta para o Frontend: $NEW_VERSION"

          # Criar a nova tag
          git tag "$NEW_VERSION"

          # Empurrar a nova tag para o repositório remoto
          git push origin "$NEW_VERSION"

          # Salvar a nova versão como uma saída do passo para ser usada por outros passos
          echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Fazer Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Buildar e Publicar Imagem Docker do Frontend
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: | 
            ${{ secrets.DOCKER_USERNAME }}/ada-company-frontend:latest
            ${{ secrets.DOCKER_USERNAME }}/ada-company-frontend:${{ github.ref_name }}
            ${{ secrets.DOCKER_USERNAME }}/ada-company-frontend:${{ steps.versioning.outputs.new_version }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Mover Cache de Buildx
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Deploy da Aplicação Frontend (Placeholder)
        run: |
          echo "Simulando a etapa de deploy do frontend."
          echo "A imagem ${{ secrets.DOCKER_USERNAME }}/ada-company-frontend:${{ steps.versioning.outputs.new_version }} foi publicada no Docker Hub."
          echo "AGORA VOCÊ PRECISA ADICIONAR SEUS COMANDOS DE DEPLOY REAIS AQUI NESTE BLOCO 'run:'."
          echo "Isso geralmente envolve puxar a imagem do Docker Hub e executá-la no seu ambiente de produção (ex: Kubernetes, EC2, etc.)."

      - name: Enviar Notificação de Sucesso (Opcional - Frontend)
        run: echo "Notificação de deploy de frontend enviada (passo real a ser implementado se desejar)."
