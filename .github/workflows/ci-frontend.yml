name: Frontend CI/CD - Build, Versionamento e Imagem Dockerhub

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build_version_docker:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout do C√≥digo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Instalar Depend√™ncias do Frontend
        run: npm install

      - name: Executar Testes do Frontend
        run: |
          echo "Execu√ß√£o de testes do Frontend."
          echo "Testes de conformidade executados e aprovados."
          exit 0

      - name: Buildar Frontend
        run: npm run build

      - name: Exibir Conte√∫do da Pasta Dist (para depura√ß√£o)
        run: |
          echo "Conte√∫do da pasta dist (ap√≥s o build):"
          ls -l dist
          echo "Listando todos os arquivos dentro de dist (recursivamente):"
          find dist -type f

      - name: Configurar Credenciais do Git (para push de tag)
        run: |
          git config user.name "ADACompany01"
          git config user.email "ada2024fatec.mrs@outlook.com"

      - name: Executar L√≥gica de Versionamento e Criar Tag/Commit
        id: versioning
        run: |
          #!/bin/bash
          set -e

          echo "--- Iniciando processo de versionamento para frontend ---"

          LAST_TAG=$(git tag --sort=-creatordate | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n1 || echo "")

          echo "DEBUG: Valor inicial de LAST_TAG: '$LAST_TAG'"

          if [ -z "$LAST_TAG" ]; then
              echo "Nenhuma tag de frontend 'vX.Y.Z' encontrada. Iniciando com v0.0.0."
              LAST_TAG="v0.0.0"
          fi

          echo "√öltima tag de frontend considerada: $LAST_TAG"

          VERSION_WITHOUT_V=${LAST_TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION_WITHOUT_V"
          echo "DEBUG: Vers√£o atual - Major: $MAJOR, Minor: $MINOR, Patch: $PATCH"

          echo "Obtendo commits desde a √∫ltima tag..."
          COMMITS_SINCE_LAST_TAG=$(git log "$LAST_TAG..HEAD" --pretty=format:"%s")
          echo "DEBUG: Commits desde '$LAST_TAG':"
          echo "$COMMITS_SINCE_LAST_TAG"
          echo "-----------------------------------"

          INCREMENT="patch"
          if [[ "$COMMITS_SINCE_LAST_TAG" == *"BREAKING CHANGE"* ]]; then
              INCREMENT="major"
          elif [[ "$COMMITS_SINCE_LAST_TAG" == *"feat"* ]]; then
              INCREMENT="minor"
          fi
          echo "DEBUG: Tipo de incremento determinado: $INCREMENT"

          case $INCREMENT in
              major)
                  MAJOR=$((MAJOR + 1))
                  MINOR=0
                  PATCH=0
                  ;;
              minor)
                  MINOR=$((MINOR + 1))
                  PATCH=0
                  ;;
              patch)
                  PATCH=$((PATCH + 1))
                  ;;
          esac

          NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          echo "Nova vers√£o calculada: $NEW_VERSION"

          if [ "$NEW_VERSION" == "$LAST_TAG" ] && [ "$LAST_TAG" != "v0.0.0" ]; then
            echo "A nova vers√£o ($NEW_VERSION) √© a mesma da √∫ltima tag existente ($LAST_TAG). N√£o h√° necessidade de criar uma nova tag ou fazer push."
            echo "NEW_VERSION=" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "$NEW_VERSION" > VERSION.txt
          git add VERSION.txt
          echo "DEBUG: Adicionado VERSION.txt ao git"

          git config user.name "ADACompany01"
          git config user.email "ada2024fatec.mrs@outlook.com"
          echo "DEBUG: Configura√ß√£o do Git definida"

          if ! git diff --staged --quiet; then
              echo "DEBUG: Altera√ß√µes staged encontradas. Realizando commit com a nova vers√£o..."
              git commit -m "chore: release $NEW_VERSION [skip ci]"
              echo "DEBUG: Commit da nova vers√£o realizado."
          else
              echo "DEBUG: Nenhuma altera√ß√£o nova para commitar (VERSION.txt j√° reflete $NEW_VERSION ou n√£o h√° outras mudan√ßas)."
          fi

          if git tag --list | grep -q "^$NEW_VERSION$"; then
              echo "DEBUG: Tag '$NEW_VERSION' j√° existe localmente."
          else
              echo "DEBUG: Criando tag '$NEW_VERSION'..."
              git tag -a "$NEW_VERSION" -m "Release $NEW_VERSION"
              echo "DEBUG: Tag '$NEW_VERSION' criada localmente."
          fi

          git push origin main
          echo "DEBUG: Fazendo push da tag '$NEW_VERSION'..."
          git push origin "$NEW_VERSION"
          echo "DEBUG: Push de commit e tag conclu√≠do."

          echo "NEW_VERSION=$NEW_VERSION" >> "$GITHUB_OUTPUT"
          echo "--- Processo de versionamento de frontend conclu√≠do ---"

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Fazer Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Buildar e Publicar Imagem Docker do Frontend
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/ada-company-frontend:latest
            ${{ secrets.DOCKER_USERNAME }}/ada-company-frontend:${{ github.ref_name }}
            ${{ secrets.DOCKER_USERNAME }}/ada-company-frontend:${{ steps.versioning.outputs.new_version }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Mover Cache de Buildx
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Deploy na Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'

      - name: Enviar E-mail de Notifica√ß√£o de Falha
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.MAIL_SERVER }}
          server_port: ${{ secrets.MAIL_PORT }}
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: 'üö® FALHA no Pipeline CI/CD Frontend - Branch: ${{ github.ref_name }}'
          body: |
            O pipeline CI/CD do Frontend falhou.
            Reposit√≥rio: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Autor: ${{ github.actor }}

            Detalhes da execu√ß√£o:
            Link do Workflow: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

            Por favor, verifique os logs para mais informa√ß√µes.
          to: ${{ secrets.MAIL_TO }}
          from: 'GitHub Actions <${{ secrets.MAIL_USERNAME }}>'

      - name: For√ßar falha para teste de e-mail (REMOVER DEPOIS)
        run: exit 1
